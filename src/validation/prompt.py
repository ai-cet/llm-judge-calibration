
"""
Prompt templates for validation operations.
"""

import json


def get_validation_prompt(question, student_code, correct_code, feedback, all_testcases):
    """
    Generate a validation prompt for assessing feedback validity.
    
    Args:
        question (str): The problem description
        student_code (str): The buggy student code
        correct_code (str): The fixed code by TA
        feedback (list): List of feedback dictionaries to validate
        all_testcases (list): List of test case dictionaries
        
    Returns:
        list: List of messages for the model
    """
    query = [
        {
            "role": "system",
            "content": """**Task**: Your goal is to assess the validity of feedback provided by a Teaching Assistant (TA) on a student's incorrect Python program.
First, you will analyze the student's code to identify specific mistakes made.
Next, compare the TA's fixed version of the code and pinpoint the changes needed to correct the student's mistakes.
Finally, analyze the feedback provided by the TA and determine if it accurately addresses the student's errors.
For each feedback line, classify it as either "valid" or "invalid" and explain your reasoning.
**Output Format**: Provide your analysis in the following JSON format

```json
    {
        "mistakes": [], // List of mistakes found in the student's code 
        "fixes": [], // List of corrections proposed in the TA's fixed code
        "feedback_lines": [ 
            {
                "line_number": <integer>, // Line number referenced by the TA feedback
                "feedback": <string>, // The feedback provided by the TA
                "analysis": <string>, // Your analysis of the feedback's accuracy 
                "classification": "valid" | "invalid" // feedback validity classification
            }
        ]
    }
```
"""
        },
        {
            "role": "user",
            "content": """**Problem description**:
```text 
You have two variables, x and y, each containing a random integer value.
Your task is to write a piece of code that will exchange the values of these two variables.
This means that the value initially held by x should be in y and vice versa.
```

**Buggy student program**:
```python 
x="newy"
y="newx"
x,y=x,y
print(x)
print(y)
```
**Fixed code generated by the teaching assistant**:
```python 
x, y = y, x
print(x)
print(y)
```
**Feedback lines by the teaching assistant that could be invalid**: 
```json 
[
    {
        "line_number": 1, 
        "feedback": "You don't need to assign new strings to x and y before swapping their values. You can directly swap the values using the syntax \"x, y = y, x\"."
    }, 
    { 
        "line_number": 2,
        "feedback": "The input is a string, but you are treating it as an integer. You need to convert the string to an integer before performing mathematical operations on it."
    }
]```

**Test case results**:
```json 
[ 
    {"expression": "x == newx", "success": false},
    {"expression": "y == newy", "success": false}, 
]
```

"""
        },
        {
            "role": "assistant",
            "content": """```json
{
    "mistakes": ["The student has made a mistake when trying to swap the values of x and y"], 
    "fixes": ["Directly swap the values instead, using the syntax \"x, y = y, x\"."],
    "feedback_lines": [ 
        { 
            "line_number": 1, 
            "feedback": "You don't need to assign new strings to x and y before swapping their values. You can directly swap the values using the syntax \"x, y = y, x\".", 
            "analysis": "The TA has correctly identified the mistake made by student while swapping the values and its fix",
            "classification": "valid" 
        }, 
        { 
            "line_number": 2,
            "feedback": "The print statements are correct. They will print the swapped values of x and y.", 
            "analysis": "This feedback is **invalid** because it incorrectly identifies the issue (as related to input string).", 
            "classification": "invalid" 
        }
    ]
}
```
"""
        },
        {
            "role": "user",
            "content": f"""**Problem description**: ```text {question} ```
**Buggy student program**: ```python {student_code} ```
**Test case results**: ```json {all_testcases if isinstance(all_testcases, str) else json.dumps(all_testcases, indent=2)} ```
**Fixed code generated by the teaching assistant**: ```python {correct_code} ```
**Feedback by the teaching assistant that could be invalid**: ```json {feedback if isinstance(feedback, str) else json.dumps(feedback, indent=2)} ```
"""
        }
    ]

    return query


def get_validation_prompt_with_ground_truth(question, student_code, correct_code, feedback, all_testcases, ground_truth):
    """
    Generate a validation prompt with ground truth for assessing feedback validity.
    
    Args:
        question (str): The problem description
        student_code (str): The buggy student code
        correct_code (str): The fixed code by TA
        feedback (list): List of feedback dictionaries to validate
        all_testcases (list): List of test case dictionaries
        ground_truth (list): List of ground truth feedback dictionaries
        
    Returns:
        list: List of messages for the model
    """
    query = [
        {
            "role": "system",
            "content": """**Task**: Your goal is to assess the validity of feedback provided by a Teaching Assistant (TA) on a student's incorrect Python program.
First, you will analyze the student's code to identify specific mistakes made.
Next, compare the TA's fixed version of the code and pinpoint the changes needed to correct the student's mistakes.
Finally, analyze the feedback provided by the TA and determine if it accurately addresses the student's errors, for this you can also use the correct feedback.
For each feedback line, classify it as either "valid" or "invalid" and explain your reasoning.
**Output Format**: Provide your analysis in the following JSON format

```json
    {
        "mistakes": [], // List of mistakes found in the student's code 
        "fixes": [], // List of corrections proposed in the TA's fixed code
        "feedback_lines": [ 
            {
                "line_number": <integer>, // Line number referenced by the TA feedback
                "feedback": <string>, // The feedback provided by the TA
                "analysis": <string>, // Your analysis of the feedback's accuracy 
                "classification": "valid" | "invalid" // feedback validity classification
            }
        ]
    }
```
"""
        },
        {
            "role": "user",
            "content": """**Problem description**:
```text 
You have two variables, x and y, each containing a random integer value.
Your task is to write a piece of code that will exchange the values of these two variables.
This means that the value initially held by x should be in y and vice versa.
```

**Buggy student program**:
```python 
x="newy"
y="newx"
x,y=x,y
print(x)
print(y)
```
**Fixed code generated by the teaching assistant**:
```python 
x, y = y, x
print(x)
print(y)
```
**Feedback lines by the teaching assistant that could be invalid**: 
```json 
[
    {
        "line_number": 1, 
        "feedback": "You don't need to assign new strings to x and y before swapping their values. You can directly swap the values using the syntax \"x, y = y, x\"."
    }, 
    { 
        "line_number": 2,
        "feedback": "The input is a string, but you are treating it as an integer. You need to convert the string to an integer before performing mathematical operations on it."
    }
]```

**Feedback lines of the correct feedback**: 
```json 
[
    {
        "line_number": 1, 
        "feedback": "You don't need to assign new strings to x and y before swapping their values. You can directly swap the values using the syntax \"x, y = y, x\"."
        "category": "valid"
    }, 
    { 
        "line_number": 2,
        "feedback": "The input is a string, but you are treating it as an integer. You need to convert the string to an integer before performing mathematical operations on it."
        "category": "invalid"
    }
]```

**Test case results**:
```json 
[ 
    {"expression": "x == newx", "success": false},
    {"expression": "y == newy", "success": false}, 
]
```

"""
        },
        {
            "role": "assistant",
            "content": """```json
{
    "mistakes": ["The student has made a mistake when trying to swap the values of x and y"], 
    "fixes": ["Directly swap the values instead, using the syntax \"x, y = y, x\"."],
    "feedback_lines": [ 
        { 
            "line_number": 1, 
            "feedback": "You don't need to assign new strings to x and y before swapping their values. You can directly swap the values using the syntax \"x, y = y, x\".", 
            "analysis": "The TA has correctly identified the mistake made by student while swapping the values and its fix",
            "classification": "valid" 
        }, 
        { 
            "line_number": 2,
            "feedback": "The print statements are correct. They will print the swapped values of x and y.", 
            "analysis": "This feedback is **invalid** because it incorrectly identifies the issue (as related to input string).", 
            "classification": "invalid" 
        }
    ]
}
```
"""
        },
        {
            "role": "user",
            "content": f"""**Problem description**: ```text {question} ```
**Buggy student program**: ```python {student_code} ```
**Test case results**: ```json {all_testcases if isinstance(all_testcases, str) else json.dumps(all_testcases, indent=2)} ```
**Fixed code generated by the teaching assistant**: ```python {correct_code} ```
**Feedback by the teaching assistant that could be invalid**: ```json {feedback if isinstance(feedback, str) else json.dumps(feedback, indent=2)} ```
**Feedback lines of the correct feedback**: ```json {ground_truth if isinstance(ground_truth, str) else json.dumps(ground_truth, indent=2)} ```
"""
        }
    ]

    return query


def get_teaching_assistant_prompt():
    """
    Get the default teaching assistant system prompt.
    
    Returns:
        str: The system prompt for teaching assistant mode
    """
    return "You are a Teaching Assistant"
